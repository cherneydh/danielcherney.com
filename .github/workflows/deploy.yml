name: Deploy to S3 and Invalidate CloudFront

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Generate articles.json
        run: node generate.js

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Sync HTML Files to S3
        run: |
          aws s3 cp ./ s3://danielcherney.com --recursive --exclude "*" --include "*.html" --content-type "text/html" --cache-control "public, max-age=31536000"

      - name: Sync CSS Files to S3
        run: |
          aws s3 cp ./css/ s3://danielcherney.com/css/ --recursive --exclude "*" --include "*.css" --content-type "text/css" --cache-control "public, max-age=31536000"

      - name: Sync JS Files to S3
        run: |
          aws s3 cp ./js/ s3://danielcherney.com/js/ --recursive --exclude "*" --include "*.js" --content-type "application/javascript" --cache-control "public, max-age=31536000"

      - name: Sync JSON Files to S3 with no-cache
        run: |
          aws s3 cp ./ s3://danielcherney.com --recursive --exclude "*" --include "articles.json" --content-type "application/json" --cache-control "no-cache"

      - name: Sync robots.txt to S3 with no-cache
        run: |
          aws s3 cp robots.txt s3://danielcherney.com/ --content-type "text/plain" --cache-control "no-cache"

      - name: Clean Up S3 Bucket (Optional)
        run: |
          aws s3 rm s3://danielcherney.com/ --recursive --exclude "*.html" --exclude "*.css" --exclude "*.js" --exclude "articles.json"

      - name: Get list of updated files
        id: file-list
        run: |
          # Ensure we're on the correct branch
          git checkout main
          
          # Fetch the latest changes
          git fetch origin
          
          # Get the list of changed files between the last commit and the current one
          if [ "$(git rev-list --count HEAD)" -eq 1 ]; then
            updated_files=$(git ls-files)
          else
            updated_files=$(git diff --name-only HEAD~1 HEAD)
          fi
          
          # Prepare invalidation paths
          invalidation_paths="/"
          for file in $updated_files; do
            invalidation_paths="$invalidation_paths /$file"
          done
          
          echo "UPDATED_FILES=$invalidation_paths" >> $GITHUB_ENV
      
      - name: Invalidate CloudFront Cache
        if: env.UPDATED_FILES != ''
        run: |
          # Run CloudFront invalidation
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths $UPDATED_FILES
